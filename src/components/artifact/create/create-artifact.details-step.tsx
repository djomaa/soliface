import assert from 'assert';
import { useAsync } from 'react-use';
import React, { useMemo, useState } from 'react'

import Box from '@mui/system/Box';
import Fab from '@mui/material/Fab';
import Stack from '@mui/system/Stack';
import Alert from '@mui/material/Alert';
import TextField from '@mui/material/TextField';
import CircularProgress from '@mui/material/CircularProgress';

import { sha256 } from 'utils/hash';
import { useArtifactList } from 'hooks/use-artifact';

import { AddAbiStep, useAddAbiCtx } from './ctx';

const DetailsStepCore: React.FC = () => {
  const ctx = useAddAbiCtx();

  const [error, setError] = useState(false);

  const { artifactList } = useArtifactList();

  const state = useAsync(() => {
    assert(ctx.abi);
    const str = JSON.stringify(ctx.abi);
    return sha256(str);
  }, [ctx.abi]);

  const stored = useMemo(() => {
    if (!state.value) {
      return;
    }
    const item = artifactList.find(({ hash }) => hash === state.value);
    return item;
  }, [state.value, artifactList]);

  return (
    <Box>
      <TextField
        variant='outlined'
        autoFocus
        fullWidth
        margin='normal'
        label="Name"
        value={ctx.name}
        error={error}
        onBlur={() => {
          if (!ctx.name) {
            setError(true);
          }
        }}
        onChange={(e) => {
          if (error) {
            setError(false);
          }
          ctx.setName(e.target.value)
        }}
      />
      <TextField
        fullWidth
        disabled={true}
        variant='filled'
        label='Full Hash'
        margin='dense'
        value={state.value ?? ''}
        helperText='Autogenerated hash of ABI JSON'
        InputProps={{
          startAdornment: state.loading ? <CircularProgress size={20} /> : undefined,
        }}
      />
      <Stack spacing={1}>
        {stored && (
          <Alert severity='warning'>
            ABI with such hash already exists in the store with name "{stored.name}". It would be replaced!
          </Alert>
        )}
        {error && (
          <Alert severity='error'>
            Name is empty
          </Alert>
        )}
      </Stack>
      <Box mt={2}>
        <Stack direction='row' justifyContent='center'>
          <Fab
            color='success'
            variant="extended"
            disabled={!state.value || error || !ctx.name}
            onClick={() => {
              ctx.save(state.value!)
            }}
          >
            {stored ? 'Replace' : 'Save'}
          </Fab>
        </Stack>
      </Box>
    </Box >
  )
}

export const DetailsStep: React.FC = () => {
  const ctx = useAddAbiCtx();
  if (ctx.step !== AddAbiStep.Details) {
    return <></>
  }
  return <DetailsStepCore />
}
